import numpy as np

def live_forecast_multi_step(model, scaled_data, scaler, window_size=120, steps_ahead=48, step_minutes=5):
    """
    –ë–∞–≥–∞—Ç–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (iterative) –Ω–∞ –∫—ñ–ª—å–∫–∞ –∫—Ä–æ–∫—ñ–≤ —É–ø–µ—Ä–µ–¥.
    :param model: –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å LSTM
    :param scaled_data: –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ StandardScaler)
    :param scaler: fitted StandardScaler
    :param window_size: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ —É –≤—ñ–∫–Ω—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 120 = 10 –≥–æ–¥–∏–Ω)
    :param steps_ahead: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ —É–ø–µ—Ä–µ–¥ (48 = 4 –≥–æ–¥–∏–Ω–∏ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º—É M5)
    :param step_minutes: –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω –≤ –æ–¥–Ω–æ–º—É –∫—Ä–æ—Ü—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5 –¥–ª—è M5)
    :return: —Ä–µ–∞–ª—å–Ω—ñ (–¥–µ–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ) –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    """
    input_window = scaled_data[-window_size:].copy()  # (window_size, n_features)
    predictions_scaled = []

    for _ in range(steps_ahead):
        input_seq = np.expand_dims(input_window, axis=0)  # (1, window_size, n_features)
        pred_scaled = model.predict(input_seq, verbose=0)
        predictions_scaled.append(pred_scaled[0, 0])  # –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è (Close)

        if input_window.shape[1] == 1:  # —Ç—ñ–ª—å–∫–∏ —Ü—ñ–Ω–∞
            next_input = np.array([[pred_scaled[0, 0]]], dtype=input_window.dtype)
        else:  # —è–∫—â–æ —î –∫—ñ–ª—å–∫–∞ —Ñ—ñ—á–µ–π ‚Äî –∑–∞–ø–æ–≤–Ω—é—î–º–æ –ª–∏—à–µ –ø–µ—Ä—à—É (—ñ–Ω—à–µ ‚Äî –Ω—É–ª—ñ)
            next_input = np.zeros((1, input_window.shape[1]), dtype=input_window.dtype)
            next_input[0, 0] = pred_scaled[0, 0]

        input_window = np.vstack([input_window, next_input])[-window_size:]

    predictions_scaled = np.array(predictions_scaled).reshape(-1, 1)
    if scaled_data.shape[1] > 1:
        zeros = np.zeros((steps_ahead, scaled_data.shape[1] - 1), dtype=predictions_scaled.dtype)
        predictions_full = np.hstack([predictions_scaled, zeros])
    else:
        predictions_full = predictions_scaled

    predictions_real = scaler.inverse_transform(predictions_full)[:, 0]

    print(f"\nüìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {steps_ahead * step_minutes} —Ö–≤ (‚âà {(steps_ahead * step_minutes) // 60} –≥–æ–¥):")
    for i, p in enumerate(predictions_real[:steps_ahead]):
        print(f"‚è© +{(i + 1) * step_minutes} —Ö–≤: {p:.5f} USD")

    return predictions_real